/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ContactBook {
  export type ContactStruct = { name: string; wallet: AddressLike };

  export type ContactStructOutput = [name: string, wallet: string] & {
    name: string;
    wallet: string;
  };
}

export interface ContactBookInterface extends Interface {
  getFunction(
    nameOrSignature: "addContact" | "getContacts" | "removeContact"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addContact",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContacts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeContact",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addContact", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContacts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeContact",
    data: BytesLike
  ): Result;
}

export interface ContactBook extends BaseContract {
  connect(runner?: ContractRunner | null): ContactBook;
  waitForDeployment(): Promise<this>;

  interface: ContactBookInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addContact: TypedContractMethod<
    [_name: string, _wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  getContacts: TypedContractMethod<
    [],
    [ContactBook.ContactStructOutput[]],
    "view"
  >;

  removeContact: TypedContractMethod<
    [_index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addContact"
  ): TypedContractMethod<
    [_name: string, _wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getContacts"
  ): TypedContractMethod<[], [ContactBook.ContactStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "removeContact"
  ): TypedContractMethod<[_index: BigNumberish], [void], "nonpayable">;

  filters: {};
}
