// SPDX-License-Identifier: Apache-2.0
pragma solidity ^0.8.0;

import "@thirdweb-dev/contracts/base/ERC1155SignatureMint.sol";

contract TennisPlayerToken is ERC1155SignatureMint {
    mapping(uint256 => uint256) public tokenPrices;

    constructor(
        address _defaultAdmin,
        string memory _name,
        string memory _symbol,
        address _royaltyRecipient,
        uint128 _royaltyBps,
        address _primarySaleRecipient
    )
        ERC1155SignatureMint(
            _defaultAdmin,
            _name,
            _symbol,
            _royaltyRecipient,
            _royaltyBps,
            _primarySaleRecipient
        )
    {}

    // Function to set the price of each token
    function setTokenPrice(uint256 tokenId, uint256 price) public onlyOwner {
        tokenPrices[tokenId] = price;
    }

    // Function to mint tokens. The actual implementation will depend on your specific requirements.
    // This is a basic placeholder to illustrate the concept.
    function mintTo(
        address to,
        uint256 id,
        uint256 amount,
        bytes memory data
    ) public payable nonReentrant {
        uint256 totalPrice = tokenPrices[id] * amount;
        require(msg.value >= totalPrice, "Insufficient payment");

        _mint(to, id, amount, data);

        // Refund any overpayment
        if (msg.value > totalPrice) {
            payable(msg.sender).transfer(msg.value - totalPrice);
        }
    }
}
